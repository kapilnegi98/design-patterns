Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.
The Adapter acts as a wrapper between two objects. It catches calls for one object and transforms them to format
and interface recognizable by the second object.

Use the pattern when you want to reuse several existing subclasses that lack some common
functionality that can’t be added to the superclass.

Imagine that you’re creating a stock market monitoring app. The app downloads the stock data from multiple sources
in XML format and then displays nice-looking charts and diagrams for the user.
At some point, you decide to improve the app by integrating a smart 3rd-party analytics library.
But there’s a catch: the analytics library only works with data in JSON format.
The structure of the app before integration with the analytics library
You can’t use the analytics library “as is” because it expects the data in a format that’s incompatible with your app.
You could change the library to work with XML. However, this might break some existing code that relies on the library.
And worse, you might not have access to the library’s source code in the first place, making this approach impossible.

----
Real world example:
Java’s Arrays.asList() Method :The java.util.Arrays.asList() method is another example of the Adapter Design Pattern in action.
This method converts an array into a List object, allowing for easier manipulation and processing of the data.

Java’s InputStreamReader and OutputStreamWriter : The java.io.InputStreamReader and java.io.OutputStreamWriter
classes act as adapters that convert an InputStream into a Reader and an OutputStream into a Writer, respectively.
These adapters allow for seamless data conversion between different formats, making it easier to work with various types of
input and output streams.

BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
System.out.print("Enter String");
String s = br.readLine();
System.out.print("Enter input: " + s);

Database Adapters: When working with different database systems, each may have its own specific API.
An adapter can be used to convert the operations and queries from one database system to another,
allowing the client code to work with a common interface.

https://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries
https://howtodoinjava.com/design-patterns/structural/adapter-design-pattern-in-java/

----

PROS:
Single Responsibility Principle.
Open/Closed Principle. You can introduce new types of adapters into the program without breaking
the existing client code, as long as they work with the adapters through the client interface.

CONS:
The overall complexity of the code increases because you need to introduce a set of new interfaces and classes.
Sometimes it’s simpler just to change the service class so that it matches the rest of your code.